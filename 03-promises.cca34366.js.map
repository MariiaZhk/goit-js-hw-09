{"mappings":"oeAMA,IAAAA,EAAAC,EAAA,SAKA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAZEQ,SAASC,cAAc,QAC/BC,iBAAiB,UAexB,SAA0BC,GACxBA,EAAMC,iBACN,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SACpD,IAAIC,EAAaC,OAAON,EAAMO,OAC1BC,EAAYF,OAAOL,EAAKM,OACxBE,EAAcH,OAAOJ,EAAOK,OAEhC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrCL,GAAcG,EACdvB,EAAcyB,EAAGL,GACdM,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,KACVJ,EAAA6B,OAAOC,QACZ,uBAAqB3B,QAAiBC,MAAW,CAC/C2B,QAAS,QAGdC,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,KACXJ,EAAA6B,OAAOI,QAAQ,sBAAoB9B,QAAeC,MAAW,CAClE2B,QAAS,O","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('form');\nformEl.addEventListener('submit', onCreatePromises);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onCreatePromises(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  let delayInput = Number(delay.value);\n  let stepInput = Number(step.value);\n  let amountInput = Number(amount.value);\n\n  for (let i = 1; i <= amountInput; i += 1) {\n    delayInput += stepInput;\n    createPromise(i, delayInput)\n      .then(({ position, delay }) => {\n        return Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          { timeout: 10000 }\n        );\n      })\n      .catch(({ position, delay }) => {\n        return Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: 10000,\n        });\n      });\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","delayInput","Number","value","stepInput","amountInput","i","then","Notify","success","timeout","catch","failure"],"version":3,"file":"03-promises.cca34366.js.map"}